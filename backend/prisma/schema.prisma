// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


// User:
// id: (PK), u8se imake it easier to view other people's profiles
// userId: (UUID) not null, links to supabase auth table
// Username
// Email - Authentication service unique
// Password hashed
// Proficiency
// Language
model User {
  id           Int           @id @unique @default(autoincrement())
  userId       String        @unique @db.Uuid
  email        String        @unique
  username     String?       @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  attemptedQuestion1 AttemptedQuestion[] @relation("user1")
  attemptedQuestion2 AttemptedQuestion[] @relation("user2")
  preferredComplexity Complexity @default(Easy)
  preferredLanguage Language @default(Python)
  isDeleted Boolean @default(false)
  @@map("Users")
}

enum Language {
  C
  Cpp
  Java
  Python
  Javascript
  Go
  Ruby
}

// ID (PK)
// title: text not null
// description: text not null
// categories: FK to Categories
// complexity: ENUM not null
// avgQuestionRating
// numberOfRatings between 0 and 5
// numberOfAttempts
// numberOfSolves
model Question {
  id         Int          @id @default(autoincrement())
  title      String
  body       String
  categories Category[]
  complexity Complexity
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  avgRating  Float       @default(0)
  ratings    Int        @default(0)
  attempts   Int        @default(0)
  solves     Int        @default(0)
  attempt AttemptedQuestion[]
	@@map("Questions")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  questions Question[]
  @@map("Categories")
}

enum Complexity {
  Easy
  Medium
  Hard
}

// AttemptedQuestions (Activity history):
// attemptId: (PK)
// userId1: (FK) not null 
// userId2: (FK) not null 
// questionId (FK) not null
// attempted_at DATETIME
// completed_at DATETIME
model AttemptedQuestion {
  id Int       @id @default(autoincrement())
  user1   User @relation("user1", fields: [userId1], references: [id])
  userId1 Int
  user2   User @relation("user2", fields: [userId2], references: [id])
  userId2 Int
  question Question @relation(fields: [questionId], references: [id])
  questionId Int
  attemptedAt    DateTime      @default(now())
  completedAt     DateTime?      
  code String?
  language Language?
	@@map("AttemptedQuestions")
}
